@import "../partials/core";
// Since you cannot extend nested selectors, we are wrapping duplicate styling.
// This whole mess is needed because the selector for mobile drop-down menu is different (#header:target .tabmenu)
// See: https://github.com/sass/sass/issues/1442

@mixin tabmenu-hover($activeMenuItemSelector) {
  box-shadow: $dropDownMenuBoxShadow;

  li {
    opacity: 1;

    #{$activeMenuItemSelector} {
      background: #fff;

      a {
        color: $dropDownMenuFont;
        border: 0 !important;

        &:after {
          //color: transparent;
          opacity: 0;
        }

        &:hover {
          background: $dropDownMenuItemHoverBg;
        }
      }

    }

    a {
      border-top: 1px solid $dropDownMenuBorderSeperator;
      color: $dropDownMenuFont;
      height: 32px;
      line-height: 32px;
    }

  }
}

#header {

  .tabmenu {
    position: absolute;
    left: 70px;
    top: $headerHeight;
    margin: 0;
    min-width: 210px;
    text-transform: uppercase;
    letter-spacing: 1px;
    font-size: 11px;
    transition: box-shadow .3s;
    padding-top: 42px;

    li {
      display: block;
      margin: 0;
      padding: 0 10px;
      background: $dropDownMenuBg;
      font-weight: 400;
      opacity: 0;
      transition: 0.3s;

      a {
        display: block;
        overflow: hidden;
        height: 0px;
        border: 0;
        padding: 0 10px;
        line-height: 0px;
        background: $dropDownMenuBg;
        color: transparent;
        -webkit-transition: 0.3s;
        transition: 0.3s;
        -webkit-transition-property: height, line-height, color;
        transition-property: height, line-height, color;

        // Different hover from .tabmenu:hover
        &:hover {
          background: $dropDownMenuItemHoverBg;
        }

      }

      // Because for some reason the messages page includes two links that can be .selected
      body:not(.messages-page) &.selected:not(.res-tabmenu-button) {
        opacity: 1;
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        padding-top: 10px;
        background: none;

        a {
          width: 100%;
          border: 0;
          background: none;
          color: #fff;
          opacity: 1;
          transition: .3s color;
          height: 32px;
          line-height: 32px;

          &:after {
            content: " ▾";
          }

        }

      }

      // Just make them look like an actual toggles buttons, and not links
      &.res-tabmenu-button.selected:not(:only-child):not(:first-child) a {
        font-weight: 600;
      }

      &:last-of-type {
        padding-bottom: 10px;
      }

    }

    // .tabmenu:hover
    &:hover {

      @include tabmenu-hover('body:not(.messages-page) &.selected:not(.res-tabmenu-button)');

    }

  }
}

#header {
  // :target for plebs
  &:target {

    .tabmenu {

      @include tabmenu-hover('body:not(.messages-page) &.selected:not(.res-tabmenu-button)');

    }
  }
}

// Search and messages page specific

body.search-page #header, body.messages-page #header, body.modtools-page #header {

  .tabmenu {

    li {

      &:first-child {
        opacity: 1;
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        padding-top: 10px;
        background: none;

        a {
          width: 100%;
          border: 0;
          background: none;
          color: #fff;
          opacity: 1;
          transition: .3s color;
          height: 32px;
          line-height: 32px;

          &:after {
            content: " ▾";
          }

        }

      }

    }

    &:hover {
      @include tabmenu-hover('&:first-child');
    }

  }

}

body.search-page #header, body.messages-page #header, body.modtools-page #header {
  &:target {

    .tabmenu {

      @include tabmenu-hover('&:first-child');

    }
  }
}

// Menus with only one item. Not worth styling because you can't style .tabmenu based on how many child elements you have in it

#header {

  .tabmenu {

    li {

      &:only-child {

        a:after {
          content: "" !important;
        }

      }

    }

  }

}

// RES menus

.RESDropdownList ul.RESDropdownOptions {
  min-width: 200px;

  li {
    height: 32px;
    line-height: 32px;
    padding: 0;

    > a, > span {
      padding: 0 10px;
      color: $dropDownMenuFont !important;
    }

    &:hover, a:hover {
      background: $dropDownMenuItemHoverBg;
      color: $dropDownMenuFont;
    }

  }

  li a span.RESMenuItemButton, li span#RESSearchMenuItem {
    display: none;
  }

  li > div {
    padding: 0 10px;
    height: 32px;
    line-height: 32px;
  }

  #DashboardLink a {
    padding-left: 0;
  }

  .toggleButton {
    margin-right: 0;
    margin-top: -3px;
  }

  .toggleLabel {
    display: none;
  }

  .toggleButton.enabled .toggleThumb::before {
    transform: translateX(21px);
  }

  // Dirty hack to get rid of the stupid up-arrow for donate button
  .RES-donate {
    font-size: 0;
    padding: 0;

    &:before {
      font-size: 11px;
      content: 'Donate to RES';
      padding: 0 10px 0 10px;
    }

  }

}

.res .RESDropdownList {
  margin-top: 10px !important;
  right: 45px !important;
  width: auto;
  box-shadow: $dropDownMenuBoxShadow;
  border: 0;
  border-radius: 0;
  padding: 10px;
  background: $dropDownMenuBg;
  text-transform: uppercase;
  letter-spacing: 1px;
  font-size: 11px
}

.res .RESDropdownList li {
  height: 40px;
  border-bottom: 1px solid $dropDownMenuBorderSeperator;
  line-height: 39px;
  font-weight: 400;
  color: $dropDownMenuFont;
}

.RESDropdownList li:last-of-type {
  border: 0
}

.res .RESDropdownList li:hover {
  background: $dropDownMenuItemHoverBg;
  color: $fontColor;
}

.RESDropdownList li:first-of-type, #RESAnnouncementMenuItem {
  padding: 0
}

.RESDropdownList #DashboardLink a {
  background: none;
  color: $fontColor;
}

.RESDropdownList #SettingsConsole, #RESAnnouncementMenuItem a {
  padding-left: 10px;
  background: none;
  color: $fontColor;
}